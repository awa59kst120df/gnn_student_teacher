
|made-with-python| |python-version| |version|

.. |made-with-python| image:: https://img.shields.io/badge/Made%20with-Python-1f425f.svg
   :target: https://www.python.org/

.. |python-version| image:: https://img.shields.io/badge/Python-3.8.0-green.svg
   :target: https://www.python.org/

.. |version| image:: https://img.shields.io/badge/version-0.1.0-orange.svg
   :target: https://www.python.org/

=============
GNN Student Teacher Analysis
=============

Explainable AI (XAI) is becoming ever more relevant. One remaining challenge is how to assess the quality of
the generated explanations? The *student teacher analysis* tries to tackle this problem by providing the
following answer: An explanation is good if it helps a student/learner to perform better on the primary
task. The analysis procedure for a given task and a given set of explanations works by defining two
architecturally identical neural networks: The first network is trained only on the dataset itself - it is
called the *reference student*. The other network is trained in an explanation supervised manner, utilizing
not only the dataset but also the given explanations during the training process - it is called the
*explanation* student. Both of these models are trained multiple independent times. If the distribution of
the main prediction results of the explanation student shows statistically significantly better performance,
we can reason that the explanations provided some sort of additional task-related information to the network
and can thus be considered "good" explanations.

Installation
============

.. code-block:: shell

    git clone anon_zs02p2

Then in the main folder run a ``pip install``:

.. code-block:: shell

    cd gnn_student_teacher
    python3 -m pip install .

Afterwards, you can check the install by invoking the CLI:

.. code-block:: shell

    python3 -m gnn_student_teacher.cli --version
    python3 -m gnn_student_teacher.cli --help


Usage
=====

Computational Experiments
-------------------------

It is possible to list, show and execute all the computational experiments using a command line interface
(CLI).

All the available experiments can be listed like this:

.. code-block:: shell

    python3 -m gnn_student_teacher.cli list

The details for a specific experiment can be viewed like this:

.. code-block:: shell

    python3 -m gnn_student_teacher.cli info [experiment_name]

A new run of an experiment can be started like this.

.. code-block::

    python3 -m gnn_student_teacher.cli run [experiment_name]

Be aware that the execution of any experiment will most likely take a lot of time.

Each experiment will create a new archive folder, which will contain all the artifacts (such as visual
examples and the raw data) created during the runtime. The location of this archive folder can be found
from the output generated by the experiment execution.

Archived Experiments
--------------------

To view the detailed data which was used in the making of the paper, go to
``gnn_student_teacher/experiments``. The subfolders in that folder contain the archived experiments.
These contain extensive examples for each repetition of the various experiments as well as all of the raw
data collected during the execution of the experiments.


Credits
=======

* PyComex_ is a micro framework which simplifies the setup, processing and management of computational
  experiments. It is also used to auto-generate the command line interface that can be used to interact
  with these experiments.

.. _PyComex: https://github.com/the16thpythonist/pycomex.git